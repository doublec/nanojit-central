/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=8 sw=4 et tw=0 ft=C:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SpiderMonkey nanojit.
 *
 * The Initial Developer of the Original Code is
 * the Mozilla Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Jeff Walden <jwalden+code@mit.edu>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Definitions of LIR opcodes.  If you need to allocate an opcode, look
 * for one defined using OP_UN() and claim it.
 *
 * Includers must define an OPxyz macro of the following form:
 *
 *   #define OPxyz(op, number, repKind, retType) ...
 *
 * Selected arguments can then be used within the macro expansions.
 * - op         Bytecode name, token-pasted after "LIR_" to form an LOpcode.
 * - number     Bytecode number, used as the LOpcode enum value.
 * - repKind    Indicates how the instruction is represented in memory;  XYZ
 *              corresponds to LInsXYZ and LRK_XYZ.
 * - retType    Type (LTy) of the value returned by the instruction.
 * - isCse      0 if the opcode can never be CSE'd safely, 1 if it always
 *              can, -1 if things are more complicated -- in which case
 *              isCseOpcode() shouldn't be called on this opcode.
 *
 * This file is best viewed with 128 columns:
12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
 *
 * Aliases for pointer-sized operations that choose 32-bit or 64-bit instructions
 * are given in the LOpcode enum in LIR.h just after including LIRopcodes.tbl.
 *
 * Certain opcodes aren't supported on all platforms, so OPxyz must be one of
 * the following:
 *
 *   OP___: for opcodes supported on all platforms.
 *   OP_UN: for opcodes not yet used on any platform.
 *   OP_32: for opcodes supported only on 32-bit platforms.
 *   OP_64: for opcodes supported only on 64-bit platforms.
 *   OP_SF: for opcodes supported only on SoftFloat platforms.
 *   OP_86: for opcodes supported only on i386/X64.
 */

#define OP_UN(n)                     OP___(__##n, n, None, Void, -1)

#ifdef NANOJIT_64BIT
#   define OP_32(a, b, c, d, e)     OP_UN(b)
#   define OP_64                    OP___
#else
#   define OP_32                    OP___
#   define OP_64(a, b, c, d, e)     OP_UN(b)
#endif

#if NJ_SOFTFLOAT_SUPPORTED
#   define OP_SF                    OP___
#else
#   define OP_SF(a, b, c, d, e)     OP_UN(b)
#endif

#if defined NANOJIT_IA32 || defined NANOJIT_X64
#   define OP_86                    OP___
#else
#   define OP_86(a, b, c, d, e)     OP_UN(b)
#endif


// Special operations.
OP___(start,     0, Op0,  Void, 0)  // start of a fragment
OP___(regfence,  1, Op0,  Void, 0)  // register fence, no register allocation is allowed across this meta instruction
OP___(skip,      2, Sk,   Void, 0)  // used to link code chunks

// Impure operations.
OP___(ldsb,      3, Ld,   I32,  0)  // 8-bit integer load, sign-extend to 32-bit
OP___(ldss,      4, Ld,   I32,  0)  // 16-bit integer load, sign-extend to 32-bit
OP___(ldzb,      5, Ld,   I32,  0)  // 8-bit integer load, zero extend to 32-bit
OP___(ldzs,      6, Ld,   I32,  0)  // 16-bit integer load, zero extend to 32-bit
OP_32(iaddp,     7, Op2,  I32,  0)  // 32-bit integer addition for temporary pointer calculations
OP_32(iparam,    8, P,    I32,  0)  // load a parameter (32-bit register or stack location)
OP___(stb,       9, Sti,  Void, 0)  // 8-bit integer store
OP___(ld,       10, Ld,   I32,  0)  // 32-bit integer load
OP_32(ialloc,   11, I,    I32,  0)  // allocate some stack space (result is a 32-bit address)
OP___(sti,      12, Sti,  Void, 0)  // 32-bit integer store
OP___(ret,      13, Op1,  Void, 0)  // return a 32-bit integer
OP___(live,     14, Op1,  Void, 0)  // extend live range of a 32-bit integer
OP___(flive,    15, Op1,  Void, 0)  // extend live range of a 64-bit float
OP___(icall,    16, C,    I32, -1)  // subroutine call returning a 32-bit value
OP___(sts,      17, Sti,  Void, 0)  // 16-bit integer store

OP___(x,        18, Op2,  Void, 0)  // exit always

// Branches.  'jt' and 'jf' must be adjacent so that (op ^ 1) gives the
// opposite one.  Static assertions in LIR.h check this requirement.
OP___(j,        19, Op2,  Void, 0)  // jump always
OP___(jt,       20, Op2,  Void, 0)  // jump if true
OP___(jf,       21, Op2,  Void, 0)  // jump if false
OP___(label,    22, Op0,  Void, 0)  // a jump target (no machine code is emitted for this)
OP___(jtbl,     23, Jtbl, Void, 0)  // jump to address in table

OP___(int,      24, I,    I32,  1)  // constant 32-bit integer
OP___(cmov,     25, Op3,  I32,  1)  // conditional move
// LIR_callh is a hack that's only used on 32-bit platforms that use SoftFloat.
// Its operand is always a LIR_icall, but one that specifies a function that
// returns a 64-bit float.  It indicates that the 64-bit float return value is
// being returned via two 32-bit integer registers.  The result is always used
// as the second operand of a LIR_qjoin.
OP_SF(callh,    26, Op1,  I32,  1)

// 64-bit float comparisons.  Their order must be preserved so that, except for
// 'feq', (op ^ 1) gives the opposite one (eg. flt ^ 1 == fgt).  They must also
// remain contiguous so that opcode range checking works correctly.
// Static assertions in LIR.h check these requirements.
OP___(feq,      27, Op2,  I32,  1)  // floating-point equality
OP___(flt,      28, Op2,  I32,  1)  // floating-point less-than
OP___(fgt,      29, Op2,  I32,  1)  // floating-point greater-than
OP___(fle,      30, Op2,  I32,  1)  // floating-point less-than-or-equal
OP___(fge,      31, Op2,  I32,  1)  // floating-point greater-than-or-equal

OP___(ldcb,     32, Ld,   I32,  1)  // non-volatile  8-bit integer load, zero-extended to 32-bit
OP___(ldcs,     33, Ld,   I32,  1)  // non-volatile 16-bit integer load, zero-extended to 32-bit
OP___(ldc,      34, Ld,   I32,  1)  // non-volatile 32-bit integer load, zero-extended to 32-bit

OP___(neg,      35, Op1,  I32,  1)  // 32-bit integer negation
OP___(add,      36, Op2,  I32,  1)  // 32-bit integer addition
OP___(sub,      37, Op2,  I32,  1)  // 32-bit integer subtraction
OP___(mul,      38, Op2,  I32,  1)  // 32-bit integer multiplication
OP_86(div,      39, Op2,  I32,  1)  // 32-bit integer division
// LIR_mod is a hack.  It's only used on i386/X64.  The operand is the result
// of a LIR_div because on i386/X64 div and mod results are computed by the
// same instruction.
OP_86(mod,      40, Op1,  I32,  1)  // 32-bit integer modulus

OP___(and,      41, Op2,  I32,  1)  // 32-bit bitwise AND
OP___(or,       42, Op2,  I32,  1)  // 32-bit bitwise OR
OP___(xor,      43, Op2,  I32,  1)  // 32-bit bitwise XOR
OP___(not,      44, Op1,  I32,  1)  // 32-bit bitwise NOT
OP___(lsh,      45, Op2,  I32,  1)  // 32-bit left shift
OP___(rsh,      46, Op2,  I32,  1)  // 32-bit right shift with sign-extend (>>)
OP___(ush,      47, Op2,  I32,  1)  // 32-bit unsigned right shift (>>>)

// Conditional guards.  'xt' and 'xf' must be adjacent so that (op ^ 1) gives
// the opposite one.  Static assertions in LIR.h check this requirement.
OP___(xt,       48, Op2,  Void, 1)  // exit if true   (0x30 0011 0000)
OP___(xf,       49, Op2,  Void, 1)  // exit if false  (0x31 0011 0001)

OP_SF(qlo,      50, Op1,  I32,  1)  // get the low  32 bits of a 64-bit value
OP_SF(qhi,      51, Op1,  I32,  1)  // get the high 32 bits of a 64-bit value

OP___(ldcsb,    52, Ld,   I32,  1)  // non-volatile  8-bit integer load, sign-extended to 32-bit
OP___(ldcss,    53, Ld,   I32,  1)  // non-volatile 16-bit integer load, sign-extended to 32-bit

OP___(addxov,   54, Op3,  I32,  1)  // 32-bit integer addition;       exit if overflow occurred, result is valid on either path
OP___(subxov,   55, Op3,  I32,  1)  // 32-bit integer subtraction;    exit if overflow occurred, result is valid on either path
OP___(mulxov,   56, Op3,  I32,  1)  // 32-bit integer multiplication; exit if overflow occurred, result is valid on either path

// 32-bit integer comparisons.  Their order must be preserved so that, except
// for 'eq', (op ^ 1) gives the opposite one (eg. lt ^ 1 == gt).  They must
// also remain contiguous so that opcode range checking works correctly.
// Static assertions in LIR.h check these requirements.
OP___(eq,       57, Op2,  I32,  1)  //          integer equality
OP___(lt,       58, Op2,  I32,  1)  //   signed integer less-than             (0x38 0011 1000)
OP___(gt,       59, Op2,  I32,  1)  //   signed integer greater-than          (0x39 0011 1001)
OP___(le,       60, Op2,  I32,  1)  //   signed integer less-than-or-equal    (0x3A 0011 1010)
OP___(ge,       61, Op2,  I32,  1)  //   signed integer greater-than-or-equal (0x3B 0011 1011)
OP___(ult,      62, Op2,  I32,  1)  // unsigned integer less-than             (0x3C 0011 1100)
OP___(ugt,      63, Op2,  I32,  1)  // unsigned integer greater-than          (0x3D 0011 1101)
OP___(ule,      64, Op2,  I32,  1)  // unsigned integer less-than-or-equal    (0x3E 0011 1110)
OP___(uge,      65, Op2,  I32,  1)  // unsigned integer greater-than-or-equal (0x3F 0011 1111)

OP___(file,     66, Op1,  Void, 0)  // source filename for debug symbols
OP___(line,     67, Op1,  Void, 0)  // source line number for debug symbols

OP___(xbarrier, 68, Op2,  Void, 0)  // memory barrier;  doesn't exit, but flushes all values to the stack
OP___(xtbl,     69, Op2,  Void, 0)  // exit via indirect jump

OP_64(qlive,    70, Op1,  Void, 0)  // extend live range of a 64-bit integer

OP_64(qaddp,    71, Op2,  I64,  0)  // 64-bit integer addition for temp pointer calculations
OP_64(qparam,   72, P,    I64,  0)  // load a parameter (64bit register or stack location)

OP___(ldf,      73, Ld,   F64,  0)  // 64-bit float load
OP_64(ldq,      74, Ld,   I64,  0)  // 64-bit integer load

OP_64(qalloc,   75, I,    I64,  0)  // allocate some stack space (result is a 64-bit address)

OP_64(stqi,     76, Sti,  Void, 0)  // 64-bit integer store

OP___(st32f,    77, Sti,  Void, 0)  // store 64-bit float as a 32-bit float (dropping precision)
OP___(ld32f,    78, Ld,   F64,  0)  // load 32-bit float and widen to 64-bit float

OP___(fcall,    79, C,    F64, -1)  // subroutine call returning 64-bit float value
OP_64(qcall,    80, C,    I64, -1)  // subroutine call returning 64-bit integer value

OP___(stfi,     81, Sti,  Void, 0)  // 64-bit float store

OP___(fret,     82, Op1,  Void, 0)  // return a 64-bit float
OP_64(qret,     83, Op1,  Void, 0)  // return a 64-bit integer

OP_UN(84)
OP_UN(85)
OP_UN(86)
OP_UN(87)

OP_64(quad,     88, N64,  I64,  1)  // 64-bit integer constant value
OP_64(qcmov,    89, Op3,  I64,  1)  // 64-bit conditional move

OP_64(i2q,      90, Op1,  I64,  1)  // sign-extend i32 to i64
OP_64(u2q,      91, Op1,  I64,  1)  // zero-extend u32 to u64
OP___(i2f,      92, Op1,  F64,  1)  // convert a signed 32-bit integer to a float
OP___(u2f,      93, Op1,  F64,  1)  // convert an unsigned 32-bit integer to a float
OP___(f2i,      94, Op1,  I32,  1)  // f2i conversion, no exception raised, platform rounding rules.

OP_UN(95)
OP_UN(96)

OP___(ldfc,     97, Ld,   F64,  1)  // non-volatile 64-bit float load
OP_64(ldqc,     98, Ld,   I64,  1)  // non-volatile 64-bit integer load

OP___(fneg,     99, Op1,  F64,  1)  // floating-point negation
OP___(fadd,    100, Op2,  F64,  1)  // floating-point addition
OP___(fsub,    101, Op2,  F64,  1)  // floating-point subtraction
OP___(fmul,    102, Op2,  F64,  1)  // floating-point multiplication
OP___(fdiv,    103, Op2,  F64,  1)  // floating-point division
// LIR_fmod is just a place-holder opcode, ie. the back-ends cannot generate
// code for it.  It's used in TraceMonkey briefly but is always demoted to a
// LIR_mod or converted to a function call before Nanojit has to do anything
// serious with it.
OP___(fmod,    104, Op2,  F64,  1)  // floating-point modulus

OP_64(qiand,   105, Op2,  I64,  1)  // 64-bit bitwise AND
OP_64(qior,    106, Op2,  I64,  1)  // 64-bit bitwise OR
OP_64(qxor,    107, Op2,  I64,  1)  // 64-bit bitwise XOR
OP_UN(108)
OP_64(qilsh,   109, Op2,  I64,  1)  // 64-bit left shift;           2nd operand is a 32-bit integer
OP_64(qirsh,   110, Op2,  I64,  1)  // 64-bit signed right shift;   2nd operand is a 32-bit integer
OP_64(qursh,   111, Op2,  I64,  1)  // 64-bit unsigned right shift; 2nd operand is a 32-bit integer
OP_64(qiadd,   112, Op2,  I64,  1)  // 64-bit bitwise ADD

OP___(ldc32f,  113, Ld,   F64,  1)  // non-volatile load 32-bit float and widen to 64-bit float
OP_SF(qjoin,   114, Op2,  F64,  1)  // join two 32-bit values (1st arg is low bits, 2nd is high)
OP_64(q2i,     115, Op1,  I32,  1)  // truncate i64 to i32
OP_UN(116)
OP_UN(117)
OP___(float,   118, N64,  F64,  1)  // 64-bit float constant value

// 64-bit integer comparisons.  Their order must be preserved so that, except
// for 'qeq', (op ^ 1) gives the opposite one (eg. qlt ^ 1 == qgt).  They must
// also remain contiguous so that opcode range checking works correctly.
// Static assertions in LIR.h check these requirements.
OP_64(qeq,     119, Op2,  I32,  1)  //          integer equality
OP_64(qlt,     120, Op2,  I32,  1)  //   signed integer less-than             (0x78 0111 1000)
OP_64(qgt,     121, Op2,  I32,  1)  //   signed integer greater-than          (0x79 0111 1001)
OP_64(qle,     122, Op2,  I32,  1)  //   signed integer less-than-or-equal    (0x7A 0111 1010)
OP_64(qge,     123, Op2,  I32,  1)  //   signed integer greater-than-or-equal (0x7B 0111 1011)
OP_64(qult,    124, Op2,  I32,  1)  // unsigned integer less-than             (0x7C 0111 1100)
OP_64(qugt,    125, Op2,  I32,  1)  // unsigned integer greater-than          (0x7D 0111 1101)
OP_64(qule,    126, Op2,  I32,  1)  // unsigned integer less-than-or-equal    (0x7E 0111 1110)
OP_64(quge,    127, Op2,  I32,  1)  // unsigned integer greater-than-or-equal (0x7F 0111 1111)


#undef OP_UN
#undef OP_32
#undef OP_64
#undef OP_SF
#undef OP_86
