/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=8 sw=4 et tw=0 ft=C:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is SpiderMonkey nanojit.
 *
 * The Initial Developer of the Original Code is
 * the Mozilla Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Jeff Walden <jwalden+code@mit.edu>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * This file is best viewed with 128 columns:
12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
 *
 * Definitions of LIR opcodes.  If you need to allocate an opcode, look
 * for one defined using OP_UN() and claim it.
 *
 * Includers must define an OPxyz macro of the following form:
 *
 *   #define OPxyz(op, number, repKind, retType) ...
 *
 * Selected arguments can then be used within the macro expansions.
 * - op         Opcode name, token-pasted after "LIR_" to form an LOpcode.
 * - number     Opcode number, used as the LOpcode enum value.
 * - repKind    Indicates how the instruction is represented in memory;  XYZ
 *              corresponds to LInsXYZ and LRK_XYZ.
 * - retType    Type (LTy) of the value returned by the instruction.
 * - isCse      0 if the opcode can never be CSE'd safely, 1 if it always
 *              can, -1 if things are more complicated -- in which case
 *              isCseOpcode() shouldn't be called on this opcode.
 *
 * Opcodes use type-indicators suffixes that are based on the Intel asm ones:
 * - 'b': "byte", ie. 8-bit integer
 * - 'w': "word", ie. 16-bit integer [*]
 * - 'l': "long", ie. 32-bit integer
 * - 'q': "quad", ie. 64-bit integer
 * - 'u': "unsigned", is used as a prefix on integer type-indicators when necessary
 * - 's': "single", ie. 32-bit floating point value
 * - 'd': "double", ie. 64-bit floating point value
 * - 'p': "pointer", ie. a long on 32-bit machines, a quad on 64-bit machines
 *
 * [*] This meaning of "word" is used in direct relation to LIR types.  But
 *     you'll probably see it elsewhere (eg. in comments) where it has the
 *     sense of "pointer-sized" word.
 *
 * 'p' opcodes are all aliases of long and quad opcodes, they're given in LIR.h
 * and chosen according to the platform pointer size.
 *
 * Certain opcodes aren't supported on all platforms, so OPxyz must be one of
 * the following:
 *
 *   OP___: for opcodes supported on all platforms.
 *   OP_UN: for opcodes not yet used on any platform.
 *   OP_32: for opcodes supported only on 32-bit platforms.
 *   OP_64: for opcodes supported only on 64-bit platforms.
 *   OP_SF: for opcodes supported only on SoftFloat platforms.
 *   OP_86: for opcodes supported only on i386/X64.
 */

#define OP_UN(n)                     OP___(__##n, n, None, Void, -1)

#ifdef NANOJIT_64BIT
#   define OP_32(a, b, c, d, e)     OP_UN(b)
#   define OP_64                    OP___
#else
#   define OP_32                    OP___
#   define OP_64(a, b, c, d, e)     OP_UN(b)
#endif

#if NJ_SOFTFLOAT_SUPPORTED
#   define OP_SF                    OP___
#else
#   define OP_SF(a, b, c, d, e)     OP_UN(b)
#endif

#if defined NANOJIT_IA32 || defined NANOJIT_X64
#   define OP_86                    OP___
#else
#   define OP_86(a, b, c, d, e)     OP_UN(b)
#endif

//---------------------------------------------------------------------------
// Miscellaneous operations
//---------------------------------------------------------------------------
OP___(start,     0, Op0,  Void, 0)  // start of a fragment

// A register fence causes no code to be generated, but it affects register
// allocation so that no registers are live when it is reached.
OP___(regfence,  1, Op0,  Void, 0)

OP___(skip,      2, Sk,   Void, 0)  // links code chunks

OP_32(paraml,    3, P,    I32,  0)  // load a long parameter (register or stack location)
OP_64(paramq,    4, P,    I64,  0)  // load a quad parameter (register or stack location)

OP_32(allocl,    5, I,    I32,  0)  // allocate stack space (result is a long address)
OP_64(allocq,    6, I,    I64,  0)  // allocate stack space (result is a quad address)

OP___(retl,      7, Op1,  Void, 0)  // return a long
OP_64(retq,      8, Op1,  Void, 0)  // return a quad
OP___(retd,      9, Op1,  Void, 0)  // return a double

OP___(livel,    10, Op1,  Void, 0)  // extend live range of a long
OP_64(liveq,    11, Op1,  Void, 0)  // extend live range of a quad
OP___(lived,    12, Op1,  Void, 0)  // extend live range of a double

OP___(file,     13, Op1,  Void, 0)  // source filename for debug symbols
OP___(line,     14, Op1,  Void, 0)  // source line number for debug symbols

OP_UN(15)
OP_UN(16)

//---------------------------------------------------------------------------
// Loads and stores
//---------------------------------------------------------------------------
OP___(ldb2l,    17, Ld,   I32, -1)  // load byte and sign-extend to a long
OP___(ldw2l,    18, Ld,   I32, -1)  // load word and sign-extend to a long
OP___(ldub2ul,  19, Ld,   I32, -1)  // load unsigned byte and zero-extend to an unsigned long
OP___(lduw2ul,  20, Ld,   I32, -1)  // load unsigned word and zero-extend to an unsigned long
OP___(ldl,      21, Ld,   I32, -1)  // load long
OP_64(ldq,      22, Ld,   I64, -1)  // load quad
OP___(ldd,      23, Ld,   F64, -1)  // load double
OP___(lds2d,    24, Ld,   F64, -1)  // load single and extend to a double

OP___(stb,      25, Sti,  Void, 0)  // store byte
OP___(stw,      26, Sti,  Void, 0)  // store word
OP___(stl,      27, Sti,  Void, 0)  // store long
OP_64(stq,      28, Sti,  Void, 0)  // store quad
OP___(std,      29, Sti,  Void, 0)  // store double
OP___(std2s,    30, Sti,  Void, 0)  // store double as a single (losing precision)

OP_UN(31)
OP_UN(32)

//---------------------------------------------------------------------------
// Calls
//---------------------------------------------------------------------------
OP___(calll,    33, C,    I32, -1)  // call subroutine that returns a long
OP_64(callq,    34, C,    I64, -1)  // call subroutine that returns a quad
OP___(calld,    35, C,    F64, -1)  // call subroutine that returns a double

OP_UN(36)

//---------------------------------------------------------------------------
// Branches and labels
//---------------------------------------------------------------------------
// 'jt' and 'jf' must be adjacent so that (op ^ 1) gives the opposite one.
// Static assertions in LIR.h check this requirement.
OP___(j,        37, Op2,  Void, 0)  // jump always
OP___(jt,       38, Op2,  Void, 0)  // jump if true
OP___(jf,       39, Op2,  Void, 0)  // jump if false
OP___(jtbl,     40, Jtbl, Void, 0)  // jump to address in table

OP___(label,    41, Op0,  Void, 0)  // a jump target (no machine code is emitted for this)

OP_UN(42)

//---------------------------------------------------------------------------
// Guards
//---------------------------------------------------------------------------
// 'xt' and 'xf' must be adjacent so that (op ^ 1) gives the opposite one.
// Static assertions in LIR.h check this requirement.
OP___(x,        43, Op2,  Void, 0)  // exit always
OP___(xt,       44, Op2,  Void, 1)  // exit if true
OP___(xf,       45, Op2,  Void, 1)  // exit if false
OP___(xtbl,     46, Op2,  Void, 0)  // exit via indirect jump
// A LIR_xbarrier cause no code to be generated, but it acts like a never-taken
// guard in that it inhibits certain optimisations, such as dead stack store
// elimination.
OP___(xbarrier, 47, Op2,  Void, 0)

OP_UN(48)

//---------------------------------------------------------------------------
// Immediates
//---------------------------------------------------------------------------
OP___(imml,     49, I,    I32,  1)  // long immediate
OP_64(immq,     50, N64,  I64,  1)  // quad immediate
OP___(immd,     51, N64,  F64,  1)  // double immediate

OP_UN(52)

//---------------------------------------------------------------------------
// Comparisons
//---------------------------------------------------------------------------

// Within each size group, order must be preserved so that, except for eq*, (op
// ^ 1) gives the opposite one (eg. lt ^ 1 == gt).  eq* must have odd numbers
// for this to work.  They must also remain contiguous so that opcode range
// checking works correctly.  Static assertions in LIR.h check these
// requirements.
OP___(eql,      53, Op2,  I32,  1)  //          long equality
OP___(ltl,      54, Op2,  I32,  1)  //   signed long less-than
OP___(gtl,      55, Op2,  I32,  1)  //   signed long greater-than
OP___(lel,      56, Op2,  I32,  1)  //   signed long less-than-or-equal
OP___(gel,      57, Op2,  I32,  1)  //   signed long greater-than-or-equal
OP___(ltul,     58, Op2,  I32,  1)  // unsigned long less-than
OP___(gtul,     59, Op2,  I32,  1)  // unsigned long greater-than
OP___(leul,     60, Op2,  I32,  1)  // unsigned long less-than-or-equal
OP___(geul,     61, Op2,  I32,  1)  // unsigned long greater-than-or-equal

OP_UN(62)

OP_64(eqq,      63, Op2,  I32,  1)  //          long equality
OP_64(ltq,      64, Op2,  I32,  1)  //   signed long less-than
OP_64(gtq,      65, Op2,  I32,  1)  //   signed long greater-than
OP_64(leq,      66, Op2,  I32,  1)  //   signed long less-than-or-equal
OP_64(geq,      67, Op2,  I32,  1)  //   signed long greater-than-or-equal
OP_64(ltuq,     68, Op2,  I32,  1)  // unsigned long less-than
OP_64(gtuq,     69, Op2,  I32,  1)  // unsigned long greater-than
OP_64(leuq,     70, Op2,  I32,  1)  // unsigned long less-than-or-equal
OP_64(geuq,     71, Op2,  I32,  1)  // unsigned long greater-than-or-equal

OP_UN(72)

OP___(eqd,      73, Op2,  I32,  1)  // double equality
OP___(ltd,      74, Op2,  I32,  1)  // double less-than
OP___(gtd,      75, Op2,  I32,  1)  // double greater-than
OP___(led,      76, Op2,  I32,  1)  // double less-than-or-equal
OP___(ged,      77, Op2,  I32,  1)  // double greater-than-or-equal

OP_UN(78)

//---------------------------------------------------------------------------
// Arithmetic
//---------------------------------------------------------------------------
OP___(negl,     79, Op1,  I32,  1)  // negate long
OP___(addl,     80, Op2,  I32,  1)  // add long
OP___(subl,     81, Op2,  I32,  1)  // subtract long
OP___(mull,     82, Op2,  I32,  1)  // multiply long
OP_86(divl,     83, Op2,  I32,  1)  // divide long
// LIR_modl is a hack.  It's only used on i386/X64.  The operand is the result
// of a LIR_divl because on i386/X64 div and mod results are computed by the
// same instruction.
OP_86(modl,     84, Op1,  I32,  1)  // modulo long

OP___(notl,     85, Op1,  I32,  1)  // bitwise-NOT long
OP___(andl,     86, Op2,  I32,  1)  // bitwise-AND long
OP___(orl,      87, Op2,  I32,  1)  // bitwise-OR long
OP___(xorl,     88, Op2,  I32,  1)  // bitwise-XOR long

OP___(lshl,     89, Op2,  I32,  1)  // left shift long
OP___(rshl,     90, Op2,  I32,  1)  // right shift long (>>)
OP___(rshul,    91, Op2,  I32,  1)  // right shift unsigned long (>>>)

OP_64(addq,     92, Op2,  I64,  1)  // add quad

OP_64(andq,     93, Op2,  I64,  1)  // bitwise-AND quad
OP_64(orq,      94, Op2,  I64,  1)  // bitwise-OR quad
OP_64(xorq,     95, Op2,  I64,  1)  // bitwise-XOR quad

OP_64(lshq,     96, Op2,  I64,  1)  // left shift quad;           2nd operand is a long
OP_64(rshq,     97, Op2,  I64,  1)  // right shift quad;          2nd operand is a long
OP_64(rshuq,    98, Op2,  I64,  1)  // right shift unsigned quad; 2nd operand is a long

OP___(negd,     99, Op1,  F64,  1)  // negate double
OP___(addd,    100, Op2,  F64,  1)  // add double
OP___(subd,    101, Op2,  F64,  1)  // subtract double
OP___(muld,    102, Op2,  F64,  1)  // multiply double
OP___(divd,    103, Op2,  F64,  1)  // divide double
// LIR_modd is just a place-holder opcode, ie. the back-ends cannot generate
// code for it.  It's used in TraceMonkey briefly but is always demoted to a
// LIR_modl or converted to a function call before Nanojit has to do anything
// serious with it.
OP___(modd,    104, Op2,  F64,  1)  // modulo double

OP___(cmovl,   105, Op3,  I32,  1)  // conditional move long
OP_64(cmovq,   106, Op3,  I64,  1)  // conditional move quad

OP_UN(107)
OP_UN(108)

//---------------------------------------------------------------------------
// Conversions
//---------------------------------------------------------------------------
OP_64(l2q,     109, Op1,  I64,  1)  // sign-extend long to quad
OP_64(ul2uq,   110, Op1,  I64,  1)  // zero-extend unsigned long to unsigned quad
OP_64(q2l,     111, Op1,  I32,  1)  // truncate quad to long (removes the high 32 bits)

OP___(l2d,     112, Op1,  F64,  1)  // convert long to double
OP___(ul2d,    113, Op1,  F64,  1)  // convert unsigned long to double
OP___(d2l,     114, Op1,  I32,  1)  // convert double to long (no exceptions raised, platform rounding rules)

OP_UN(115)
OP_UN(116)

//---------------------------------------------------------------------------
// Overflow arithmetic
//---------------------------------------------------------------------------
// These all exit if overflow occurred.  The results is valid on either path.
OP___(addxovl, 117, Op3,  I32,  1)  // add long and exit on overflow
OP___(subxovl, 118, Op3,  I32,  1)  // sub long and exit on overflow
OP___(mulxovl, 119, Op3,  I32,  1)  // multiply long and exit on overflow

OP_UN(120)

//---------------------------------------------------------------------------
// SoftFloat
//---------------------------------------------------------------------------
OP_SF(dlo2l,   121, Op1,  I32,  1)  // get the low  32 bits of a double as a long
OP_SF(dhi2l,   122, Op1,  I32,  1)  // get the high 32 bits of a double as a long
OP_SF(ll2d,    123, Op2,  F64,  1)  // join two longs (1st arg is low bits, 2nd is high)

// LIR_hcalll is a hack that's only used on 32-bit platforms that use
// SoftFloat.  Its operand is always a LIR_calll, but one that specifies a
// function that returns a double.  It indicates that the double result is
// returned via two 32-bit integer registers.  The result is always used as the
// second operand of a LIR_ll2d.
OP_SF(hcalll,  124, Op1,  I32,  1)

OP_UN(125)
OP_UN(126)
OP_UN(127)

#undef OP_UN
#undef OP_32
#undef OP_64
#undef OP_SF
#undef OP_86
