zero = int 0
one = int 1

; 46341 * 46341 >= 2^31, and will overflow.
big = int 46341

; Because 'big' isn't used after mul, it _may_ get allocated to the same
; register as 'res'. This is the case with the ARM back-end, and that is where
; this test is important as rX=rX*rX isn't possible on ARMv5 without some
; trickery.
res = mul big big
check = ov res
; We can't use the result of 'ov' directly in cmov, so compare it with 1.
toobig = eq check one

; Return either the result (if we didn't overflow) or 0.
ans = cmov toobig zero res
ret ans

